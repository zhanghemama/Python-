python中列表是可变的，元组是不可变的. 他们的存储方式不同。因为列表是动态的，他需要存储指针来指向对应的元素（8字节），因为列表可变，所以要存储
已经分配的大小（8字节）来追踪列表空间的使用情况。空间不足时，及时分配内存。而元组大小固定，分配的内存大小也是固定的。分配同样的元素，列表占得内
存比元组多.
l = []
l.__sizeof__() // 空列表的存储空间为 40 字节
40
l.append(1)
l.__sizeof__() 
72 // 加入了元素 1 之后，列表为其分配了可以存储 4 个元素的空间 (72 - 40)/8 = 4
l.append(2) 
l.__sizeof__()
72 // 由于之前分配了空间，所以加入元素 2，列表空间不变
l.append(3)
l.__sizeof__() 
72 // 同上
l.append(4)
l.__sizeof__() 
72 // 同上
l.append(5)
l.__sizeof__() 
104 // 加入元素 5 之后，列表的空间不足，所以又额外分配了可以存储 4 个元素的空间

上述是列表空间的分配过程,为了减小每次增加删除操作时带来的开销，python每次分配空间的时候会多分配一些，这样的机制保证其高效性，增加删除的平均复杂
度为O(1).

比较列表和元组，元组更加轻量级，性能也优于列表。 python的后台会对静态数据做资源缓存。一般来说，垃圾回收机制，在一些变量不使用的时候，会将其内存
返回给操作系统，以给其他变量和程序使用。但是对于元组这样的静态变量，如果他不被使用，并且内存占用不大的时候，系统会先将其缓存起来，这样下次创建同
样大小的元组时，就不需要向操作系统申请内存了，直接从缓存里面申请，这会大大提升程序的运行速度。

初始化相同元素的元组和列表，元组的执行速度比列表快5倍
